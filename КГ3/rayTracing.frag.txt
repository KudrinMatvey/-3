#version 430

in vec3 origin,direction;
out vec4 outputColor;

struct Triangle
{
	vec3 a,b,c;	
	Material material;
};
struct Sphere
{
	vec3 position;
	float radius;
	vec3 color;
	//Material material;
};
struct Material
{
	vec3 ambiant,diffuse,refletion,specular,transparancy,emission,atenuation;
	float refractionCoef, shiness;
	
};
struct Ray
{
	vec3 origin;
	vec3 direction;
	int type;
};
const int TYPE_DIFFUSE = 1;
const int TYPE_SHADOW = 2;
const int TYPE_REFLECTION = 3;
const int TYPE_TRANSPARANCY = 4;

struct RayNode
{
	Ray ray;
	vec3 refletionColor,refractionColor,diffuseColor,specular,refletion,refraction;
	int parentIndex;
	int depth;
};

struct HitInfo
{
	bool hitDetected;
	vec3 hitPoint;
	vec3 surfaceNormal;
	float distance;
	int objectid;
	int objectType;
};
const int TYPE_SPHERE = 1;
const int TYPE_TRIANGLE = 2;

const int Max_Depth = 5;
const int Max_Nodes = 64;

const int sphereNumber = 2;
const int triangleNumber = 1;
Triangle triangles[triangleNumber];
Sphere spheres[sphereNumber];
RayNode rayNode[Max_Nodes];

void triangleIntersect(Ray ray, int objectid,inout HitInfo hitInfo)
{
	triangle = triangles[objectid];
	vec3 a,b,n;
	a = triangle.a - ray.origin;
	b = triangle.b - ray.origin;
	n = cross(a,b)
	float ip1 = dot(ray.direction,n);
	
	a = triangle.b - ray.origin;
	b = triangle.c - ray.origin;
	n = cross(a,b)
	float ip2 = dot(ray.direction,n);
	
	a = triangle.c - ray.origin;
	b = triangle.a - ray.origin;
	n = cross(a,b)
	float ip3 = dot(ray.direction,n);
	
	if(!(((ip1 <= 0) && (ip2 <= 0) && (ip3 <= 0))|| ((ip1 >= 0) && (ip2 >= 0) && (ip3 >= 0))))
		return;
}
void sphereIntersect(Ray ray, int objectid, inout HitInfo hitInfo)
{
	Sphere sphere = spheres[objectid];
	vec3 trackToSphere = ray.origin - sphere.position;
	float a = dot(ray.direction,ray.direction);
	float b = 2 * dot(trackToSphere,ray.direction);
	float c = dot(trackToSphere, trackToSphere) - sphere.radius * sphere.radius;
	float discriminant = b * b - 4.0 * a * c;

	if( discriminant > 0.0)
	{
		float distance = (- b - sqrt(discriminant)) / (2.0 * a);
		if(distance > 0.0001 && (distance<hitInfo.distance && hitInfo.hitDetected ||  !hitInfo.hitDetected))
		{
			hitInfo.distance = distance;
			hitInfo.hitPoint = ray.origin + ray.direction * hitInfo.distance;
			hitInfo.surfaceNormal = normalize(hitInfo.hitPoint - sphere.position);
			hitInfo.hitDetected = true;
			hitInfo.objectid = objectid;
		}
	}
}
vec3 iterativeRayTrace(Ray ray)
{
	spheres[0].position = vec3(0.0,0.0, -1.0);
	spheres[0].radius = 0.5;
	spheres[0].color = vec3(0.9,0.5,0.7);

	spheres[1].position = vec3(1.1,1.1, -2.0);
	spheres[1].radius = 1.5;
	spheres[1].color = vec3(0.5,0.5,0.7);

	int numberOfNodes = 1, currentNodeIndex = 0;
	float cos;
	rayNode[currentNodeIndex].ray = ray;
	rayNode[currentNodeIndex].depth = 0;

	while(currentNodeIndex < numberOfNodes)
	{			
		HitInfo hitInfo;
		hitInfo.hitDetected = false;
		for(int i = 0;i<sphereNumber;i++){
		sphereIntersect(ray[currentNodeIndex],i,hitInfo);
		}
		for(int i = 0;i<triangleNumber;i++){
		triangleIntersect(ray[currentNodeIndex],i,hitInfo);
		}
		
		if(hitInfo.hitDetected)
		{
			Material material;
			switch(hitInfo.objectType)
			{
				case TYPE_SPHERE : material = spheres[hitInfo.objectid].material; break;
				case TYPE_TRIANGLE : material = triangles[hitInfo.objectid].material; break;				
			}
			
			rayNode[currentNodeIndex].specular = material.specular;			
			rayNode[currentNodeIndex].refletion = material.refletion;
			rayNode[currentNodeIndex].refraction = material.transparancy;
			
			if(length(material.refletion) > 0.0 && rayNode[currentNodeIndex].ray.direction< Max_Depth);
			{
				vec3 refletionDir = normalize(reflect(rayNode[currentNodeIndex].ray.direction,hitInfo.surfaceNormal));
				
			}
			
		cos = 0.5f;
			cos = (ray.direction.x * hitInfo.surfaceNormal.x + ray.direction.y * hitInfo.surfaceNormal.y + ray.direction.z * hitInfo.surfaceNormal.z + 1) /  
									(sqrt(ray.direction.x * ray.direction.x + ray.direction.y * ray.direction.y + ray.direction.z * ray.direction.z)
									* sqrt(hitInfo.surfaceNormal.x * hitInfo.surfaceNormal.x + hitInfo.surfaceNormal.y * hitInfo.surfaceNormal.y + hitInfo.surfaceNormal.z * hitInfo.surfaceNormal.z));  
		
			rayNode[currentNodeIndex].color = spheres[hitInfo.objectid].color * cos;
		}
		else break;
		currentNodeIndex++;
	}
	return rayNode[0].color;
}
void main()
{
	Ray ray = Ray(origin,direction);
	outputColor = vec4(iterativeRayTrace(ray),1);
}
